// contains the hex data for pong generated by this command:
// var rom = require('fs').readFileSync(process.argv[2]).toJSON() // Loads the room from the args supplied in the terminal
var emu = emu || {};

emu.pongData = {
  type: 'Buffer',
  data:
    [ 106, 2, 107, 12, 108, 63, 109, 12, 162, 234, 218, 182, 220, 214, 110, 0, 34, 212, 102, 3, 104, 2,
      96, 96, 240, 21, 240, 7, 48, 0, 18, 26, 199, 23, 119, 8, 105, 255, 162, 240, 214, 113, 162, 234, 218,
      182, 220, 214, 96, 1, 224, 161, 123, 254, 96, 4, 224, 161, 123, 2, 96, 31, 139, 2, 218, 182, 96, 12,
      224, 161, 125, 254, 96, 13, 224, 161, 125, 2, 96, 31, 141, 2, 220, 214, 162, 240, 214, 113, 134, 132,
      135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 70, 2, 18, 120, 70, 63, 18, 130, 71, 31, 105, 255, 71, 0,
      105, 1, 214, 113, 18, 42, 104, 2, 99, 1, 128, 112, 128, 181, 18, 138, 104, 254, 99, 10, 128, 112, 128,
      213, 63, 1, 18, 162, 97, 2, 128, 21, 63, 1, 18, 186, 128, 21, 63, 1, 18, 200, 128, 21, 63, 1, 18, 194,
      96, 32, 240, 24, 34, 212, 142, 52, 34, 212, 102, 62, 51, 1, 102, 3, 104, 254, 51, 1, 104, 2, 18, 22, 121,
      255, 73, 254, 105, 255, 18, 200, 121, 1, 73, 2, 105, 1, 96, 4, 240, 24, 118, 1, 70, 64, 118, 254, 18, 108,
      162, 242, 254, 51, 242, 101, 241, 41, 100, 20, 101, 0, 212, 85, 116, 21, 242, 41, 212, 85, 0, 238, 128, 128,
      128, 128, 128, 128, 128, 0, 0, 0, 0, 0 ]
}

/**
 *
// Buffer value? Gotten from running toString(16) on the values above...
6a 2 6b c 6c 3f 6d c a2 ea da b6 dc d6 6e 0 22 d4 66 3 68 2 60 60 f0 15 f0 7 30 0 12 1a c7 17 77 8 69 ff a2 f0 d6
71 a2 ea da b6 dc d6 60 1 e0 a1 7b fe 60 4 e0 a1 7b 2 60 1f 8b 2 da b6 60 c e0 a1 7d fe 60 d e0 a1 7d 2 60 1f 8d 2
dc d6 a2 f0 d6 71 86 84 87 94 60 3f 86 2 61 1f 87 12 46 2 12 78 46 3f 12 82 47 1f 69 ff 47 0 69 1 d6 71 12 2a 68 2
63 1 80 70 80 b5 12 8a 68 fe 63 a 80 70 80 d5 3f 1 12 a2 61 2 80 15 3f 1 12 ba 80 15 3f 1 12 c8 80 15 3f 1 12 c2 60
20 f0 18 22 d4 8e 34 22 d4 66 3e 33 1 66 3 68 fe 33 1 68 2 12 16 79 ff 49 fe 69 ff 12 c8 79 1 49 2 69 1 60 4 f0 18
76 1 46 40 76 fe 12 6c a2 f2 fe 33 f2 65 f1 29 64 14 65 0 d4 55 74 15 f2 29 d4 55 0 ee 80 80 80 80 80 80 80 0 0 0
0 0

// wrong opcode order because we aren't redirecting preporely...
// Hex values of all the opcodes that get executed...
6a02,6b0c,6c3f,6d0c,a2ea,dcd6,6e00,22d4,6603,6802,6060,f015,f007,3000,121a,c717,7708,69ff,a2f0,a2ea,dcd6,6001,e0a1,7bfe,6004,e0a1,7b02,601f,8b02,dab6,600c,e0a1,7dfe,600d,e0a1,7d02,601f,8d02,dcd6,a2f0,8684,8794,603f,8602,611f,8712,4602,1278,463f,1282,471f,69ff,4700,6901,d671,122a,6802,6301,8070,80b5,128a,68fe,630a,8070,80d5,3f01,12a2,6102,8015,3f01,12ba,8015,3f01,12c8,8015,3f01,12c2,6020,f018,22d4,8e34,22d4,663e,3301,6603,68fe,3301,6802,1216,79ff,49fe,69ff,12c8,7901,4902,6901,6004,f018,7601,4640,76fe,126c,a2f2,f265,f129,6414,6500,d455,7415,f229,d455,ee,8080,8080,8080,8000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

**/
